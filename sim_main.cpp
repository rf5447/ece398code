#include "VSMControlFig4Structural.h"  // Generated by Verilator when compiled with Verilog module
#include "verilated.h"    // Core library
#include "verilated_vcd_c.h"  // Allows VCD dumping
#include <iostream>  // Standard IO stream

#define MAX_SIM_CYCLES 100  // Define maximum simulation cycles

// Recursive function to explore all input combinations of mr and start
void run_simulation(int cycle, VSMControlFig4Structural* top, VerilatedVcdC* trace) {
    // Base case: stop recursion after MAX_SIM_CYCLES
    if (cycle >= MAX_SIM_CYCLES) {
        return;
    }

    // Toggle clock every cycle
    top->clk = (cycle % 2 == 0) ? 1 : 0;  // If cycle is even, clk = 1, else clk = 0

    // Evaluate the model
    top->eval();

    // Print the inputs and outputs for each cycle
    std::cout << "Cycle: " << cycle << " | "
              << "clk: " << top->clk << ", "
              << "rst: " << top->rst << ", "
              << "start: " << top->start << ", "
              << "mr: " << top->mr << std::endl;

    // On the falling edge (clk == 0), update inputs based on the cycle
    if (top->clk == 0) {
        // Reset logic: Deassert after cycle 2
        if (cycle == 2) {
            top->rst = 0;  // Deassert reset after 2 cycles
        }
        // if (cycle == 10) {
        //     top->rst = 1;  // Assert reset at cycle 10
        // }
        // if (cycle == 12) {
        //     top->rst = 0;  // Deassert reset at cycle 12
        // }

        // Start operation after a few cycles
        if (cycle == 3) top->start = 1;  // Start the operation at cycle 3
        if (cycle == 4) top->start = 0;  // Deassert start after cycle 4

        // Handle mr logic
        int mr_value = (cycle % 16);  // Cycle through all values of mr (0 to 15)
        top->mr = mr_value;  // Set the multiplier register

        // Dump the trace for the current cycle
        trace->dump(cycle);
    }

    // Recursively call the function for the next cycle with updated values
    run_simulation(cycle + 1, top, trace);
}

int main(int argc, char **argv) {
    Verilated::commandArgs(argc, argv);
    // Instantiate the DUT (Design Under Test)
    VSMControlFig4Structural *top = new VSMControlFig4Structural;

    // Enable waveform tracing
    Verilated::traceEverOn(true);
    VerilatedVcdC *trace = new VerilatedVcdC;  // Create a VCD trace object
    top->trace(trace, 99);  // Attach trace object to DUT
    trace->open("waveform.vcd");  // Open VCD file for writing

    // Initialize inputs
    top->clk = 0;
    top->rst = 1;  // Start with reset enabled
    top->start = 0;
    top->mr = 0x0;  // Default multiplier value

    // Handle the first two cycles manually in the main function
    // Cycle 0 (Clock high)
    top->clk = 1;
    top->eval();
    std::cout << "Cycle 0 - clk: " << top->clk << ", rst: " << top->rst << ", start: " << top->start << ", mr: " << top->mr << std::endl;
    trace->dump(0);  // Dump the state to trace

    // Cycle 1 (Clock low)
    top->clk = 0;
    top->eval();
    std::cout << "Cycle 1 - clk: " << top->clk << ", rst: " << top->rst << ", start: " << top->start << ", mr: " << top->mr << std::endl;
    trace->dump(1);  // Dump the state to trace

    // Now start recursive simulation from cycle 2 onwards
    run_simulation(2, top, trace);

    // Close the trace file after simulation
    trace->close();
    delete top;
    delete trace;

    return 0;
}
